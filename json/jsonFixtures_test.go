package json

import (
	"fmt"
	"io"

	. "github.com/polydawn/refmt/tok"
	"github.com/polydawn/refmt/tok/fixtures"
)

var inapplicable = fmt.Errorf("skipme: inapplicable")

var jsonFixtures = []struct {
	title        string
	sequence     fixtures.Sequence
	serial       string
	encodeResult error
	decodeResult error
}{
	// Booleans
	{"",
		fixtures.SequenceMap["true"],
		`true`,
		nil,
		nil,
	},
	{"",
		fixtures.SequenceMap["false"],
		`false`,
		nil,
		nil,
	},

	// Strings
	{"",
		fixtures.SequenceMap["empty string"],
		`""`,
		nil,
		nil,
	},
	{"decoding with extra whitespace",
		fixtures.SequenceMap["empty string"].SansLengthInfo(),
		`  "" `,
		inapplicable,
		nil,
	},
	{"",
		fixtures.SequenceMap["flat string"],
		`"value"`,
		nil,
		nil,
	},
	{"",
		fixtures.SequenceMap["strings needing escape"],
		`"str\nbroken\ttabbed"`,
		nil,
		nil,
	},

	// Maps
	{"",
		fixtures.SequenceMap["empty map"].SansLengthInfo(),
		`{}`,
		nil,
		nil,
	},
	{"decoding with extra whitespace",
		fixtures.SequenceMap["empty map"].SansLengthInfo(),
		`{  }`,
		inapplicable,
		nil,
	},
	{"",
		fixtures.SequenceMap["single row map"].SansLengthInfo(),
		`{"key":"value"}`,
		nil,
		nil,
	},
	{"decoding with extra whitespace",
		fixtures.SequenceMap["single row map"].SansLengthInfo(),
		` { "key"  :  "value" } `,
		inapplicable,
		nil,
	},
	{"",
		fixtures.SequenceMap["duo row map"].SansLengthInfo(),
		`{"key":"value","k2":"v2"}`,
		nil,
		nil,
	},
	{"decoding with extra whitespace",
		fixtures.SequenceMap["duo row map"].SansLengthInfo(),
		`{"key":"value",  "k2":"v2"}`,
		inapplicable,
		nil,
	},
	{"decoding with trailing comma",
		fixtures.SequenceMap["duo row map"].SansLengthInfo(),
		`{"key":"value","k2":"v2",}`,
		inapplicable,
		nil,
	},
	{"",
		fixtures.SequenceMap["duo row map alt2"].SansLengthInfo(),
		`{"k2":"v2","key":"value"}`,
		inapplicable,
		nil,
	},

	// Arrays
	{"",
		fixtures.SequenceMap["empty array"].SansLengthInfo(),
		`[]`,
		nil,
		nil,
	},
	{"decoding with extra whitespace",
		fixtures.SequenceMap["empty array"].SansLengthInfo(),
		`  [ ] `,
		inapplicable, nil,
	},
	{"",
		fixtures.SequenceMap["single entry array"].SansLengthInfo(),
		`["value"]`,
		nil,
		nil,
	},
	{"decoding with extra whitespace",
		fixtures.SequenceMap["single entry array"].SansLengthInfo(),
		`  [ "value" ] `,
		inapplicable,
		nil,
	},
	{"",
		fixtures.SequenceMap["duo entry array"].SansLengthInfo(),
		`["value","v2"]`,
		nil,
		nil,
	},
	{"decoding with extra whitespace",
		fixtures.SequenceMap["duo entry array"].SansLengthInfo(),
		`["value",  "v2"]`,
		inapplicable,
		nil,
	},

	// Complex / mixed / nested.
	{"",
		fixtures.SequenceMap["array nested in map as non-first and final entry"].SansLengthInfo(),
		`{"k1":"v1","ke":["oh","whee","wow"]}`,
		nil,
		nil,
	},
	{"",
		fixtures.SequenceMap["array nested in map as first and non-final entry"].SansLengthInfo(),
		`{"ke":["oh","whee","wow"],"k1":"v1"}`,
		nil,
		nil,
	},
	{"",
		fixtures.SequenceMap["maps nested in array"].SansLengthInfo(),
		`[{"k":"v"},"whee",{"k1":"v1"}]`,
		nil,
		nil,
	},
	{"",
		fixtures.SequenceMap["arrays in arrays in arrays"].SansLengthInfo(),
		`[[[]]]`,
		nil,
		nil,
	},
	{"",
		fixtures.SequenceMap["maps nested in maps"].SansLengthInfo(),
		`{"k":{"k2":"v2"}}`,
		nil,
		nil,
	},

	// Errors when decoding invalid inputs!
	{"",
		fixtures.SequenceMap["dangling arr open"].SansLengthInfo().Append(Token{}),
		`[`,
		inapplicable,
		io.EOF, // REVIEW it's probably more explicitly unexpected than that...
	},

	// Numeric.
	{"",
		fixtures.Sequence{"integer zero", []Token{{Type: TInt, Int: 0}}},
		"0",
		nil,
		nil,
	},
	{"",
		fixtures.Sequence{"integer one", []Token{{Type: TInt, Int: 1}}},
		"1",
		nil,
		nil,
	},
	{"",
		fixtures.Sequence{"integer neg 1", []Token{{Type: TInt, Int: -1}}},
		"-1",
		nil,
		nil,
	},
	{"",
		fixtures.Sequence{"integer neg 100", []Token{{Type: TInt, Int: -100}}},
		"-100",
		nil,
		nil,
	},
	{"",
		fixtures.Sequence{"integer 1000000", []Token{{Type: TInt, Int: 1000000}}},
		"1000000",
		nil,
		nil,
	},
	// FIXME floats require finishing moar state machine
	//	{"",
	//		fixtures.Sequence{"float 1 e+100", []Token{{Type: TFloat64, Float64: 1.0e+300}}},
	//		`1e+300`,
	//		inapplicable, // TODO should support situationEncoding too
	//		nil,
	//	},
}
